import os
import threading
import aiosqlite
import xlsxwriter
from flask import Flask
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

app = Flask(__name__)
@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_keepalive():
    app.run(host="0.0.0.0", port=8080)

(
    CHOOSE_ROLE, SELECT_USER, PASSWORD, MAIN_MENU,
    ADDRESS, SHOP, PRODUCT_QTY, DELIVERY_DATE,
    CHANGE_PASS_LOGIN, CHANGE_PASS_NEW
) = range(10)

user_sessions = {}
BOT_TOKEN = os.getenv("BOT_TOKEN")

PRODUCTS = [
    ("–ì–µ–ª—å Sa 5–ª (Super)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (Bablegum)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–õ–∏–º–æ–Ω)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ë–µ–ª—ã–π)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ì–æ–ª—É–±–æ–π)", 1350),
    ("–ì–µ–ª—å Sa 3–ª (–ì–æ–ª—É–±–æ–π)", 1200),
    ("–ì–µ–ª—å Sa 3–ª (–ë–µ–ª—ã–π)", 1200),
    ("–°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã 1–ª (–õ–∏–º–æ–Ω)", 550),
]

def main_menu(role):
    if role == "manager":
        keyboard = [["üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"], ["üö™ –í—ã–π—Ç–∏"]]
    else:
        keyboard = [["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìÑ –ó–∞–∫–∞–∑—ã"],
                    ["üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"],
                    ["üö™ –í—ã–π—Ç–∏"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def export_orders_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id, role = user_sessions.get(update.effective_chat.id, (None, None))
    if role != "admin":
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–≥—Ä—É–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
        return MAIN_MENU

    async with aiosqlite.connect("orders.db") as db:
        orders = await db.execute_fetchall("SELECT * FROM orders")
        if not orders:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return MAIN_MENU

        wb = xlsxwriter.Workbook("orders.xlsx")
        ws = wb.add_worksheet("–ó–∞–∫–∞–∑—ã")
        ws.write_row(0, 0, ["ID –∑–∞–∫–∞–∑–∞", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–î–∞—Ç–∞", "–ê–¥—Ä–µ—Å", "–ú–∞–≥–∞–∑–∏–Ω", "–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞", "–î–æ—Å—Ç–∞–≤–∫–∞"])

        row = 1
        for order in orders:
            order_id, user_id, date, address, shop, qty, amt, delivery = order
            async with db.execute("SELECT name, price, quantity FROM order_items WHERE order_id = ?", (order_id,)) as item_cursor:
                items = await item_cursor.fetchall()
            for name, price, quantity in items:
                ws.write_row(row, 0, [order_id, user_id, date, address, shop, name, quantity, price, quantity * price, delivery])
                row += 1

        wb.close()

    with open("orders.xlsx", "rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename="orders.xlsx"),
            caption="üìÑ –í—Å–µ –∑–∞–∫–∞–∑—ã (Excel)"
        )
    return MAIN_MENU
    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
    return ConversationHandler.END

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    if chat_id not in user_sessions:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END
    user_id, role = user_sessions[chat_id]
    if text == "üö™ –í—ã–π—Ç–∏":
        del user_sessions[chat_id]
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏. –í–≤–µ–¥–∏—Ç–µ /start", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if role == "manager":
        if text == "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
            context.user_data['order_items'] = []
            context.user_data['product_index'] = 0
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
            return ADDRESS
        elif text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            return await show_my_orders(update, user_id)
    if role == "admin":
        if text == "üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
            return CHANGE_PASS_LOGIN
        elif text == "üìÑ –ó–∞–∫–∞–∑—ã":
            return await export_orders_excel(update, context)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    return MAIN_MENU

async def get_address(update, context):
    context.user_data['address'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")
    return SHOP

async def get_shop(update, context):
    context.user_data['shop'] = update.message.text.strip()
    return await ask_product(update, context)

async def ask_product(update, context):
    index = context.user_data['product_index']
    if index >= len(PRODUCTS):
        return await finalize_order(update, context)
    name, price = PRODUCTS[index]
    await update.message.reply_text(f"{name} ‚Äî {price} —Ç–≥\n–°–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ–±–æ–∫? (0 ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
    return PRODUCT_QTY

async def get_product_qty(update, context):
    qty = update.message.text.strip()
    if not qty.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return PRODUCT_QTY
    qty = int(qty)
    index = context.user_data['product_index']
    if qty > 0:
        context.user_data['order_items'].append((PRODUCTS[index][0], PRODUCTS[index][1], qty))
    context.user_data['product_index'] += 1
    return await ask_product(update, context)

async def finalize_order(update, context):
    items = context.user_data['order_items']
    lines = []
    total = 0
    for name, price, qty in items:
        sum_ = qty * price
        total += sum_
        lines.append(f"‚Ä¢ {name} ‚Äî {qty} x {price} = {sum_} —Ç–≥")
    context.user_data['amount'] = str(total)
    context.user_data['quantity'] = str(sum(q for _, _, q in items))
    await update.message.reply_text("\n".join(["üßº –ó–∞–∫–∞–∑:"] + lines + [f"üí∞ –ò—Ç–æ–≥–æ: {total} —Ç–≥"]))
    keyboard = [["–°–µ–≥–æ–¥–Ω—è"], ["–ó–∞–≤—Ç—Ä–∞"], ["–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))
    return DELIVERY_DATE

async def get_delivery(update, context):
    text = update.message.text.strip().lower()
    delta = {"—Å–µ–≥–æ–¥–Ω—è": 0, "–∑–∞–≤—Ç—Ä–∞": 1, "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": 2}.get(text)
    if delta is None:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return DELIVERY_DATE
    delivery = datetime.today() + timedelta(days=delta)
    context.user_data['delivery'] = delivery.strftime("%Y-%m-%d")
    user_id, _ = user_sessions[update.effective_chat.id]
    async with aiosqlite.connect("orders.db") as db:
        cursor = await db.execute("""INSERT INTO orders (user_id, date, address, shop, quantity, amount, delivery)
            VALUES (?, ?, ?, ?, ?, ?, ?)""", (
            user_id,
            context.user_data['date'],
            context.user_data['address'],
            context.user_data['shop'],
            context.user_data['quantity'],
            context.user_data['amount'],
            context.user_data['delivery']
        ))
        order_id = cursor.lastrowid
        for name, price, qty in context.user_data['order_items']:
            await db.execute("INSERT INTO order_items (order_id, name, price, quantity) VALUES (?, ?, ?, ?)", (order_id, name, price, qty))
        await db.commit()
    await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_menu("manager"))
    return MAIN_MENU

async def show_my_orders(update, user_id):
    async with aiosqlite.connect("orders.db") as db:
        async with db.execute("SELECT id, date, shop, quantity, amount FROM orders WHERE user_id = ?", (user_id,)) as cursor:
            orders = await cursor.fetchall()
        if not orders:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return MAIN_MENU
        result = []
        for order in orders:
            order_id, date, shop, qty, amt = order
            result.append(f"üìÖ {date} | üè™ {shop} | üì¶ {qty} | üí∞ {amt} —Ç–≥")
            async with db.execute("SELECT name, quantity, price FROM order_items WHERE order_id = ?", (order_id,)) as items:
                for name, q, p in await items.fetchall():
                    result.append(f"‚ÄÉ‚ÄÉ‚Ä¢ {name} ‚Äî {q} x {p}")
    await update.message.reply_text("\n".join(result))
    return MAIN_MENU

async def export_orders_excel(update, context):
    user_id, role = user_sessions.get(update.effective_chat.id, (None, None))
    if role != "admin":
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–≥—Ä—É–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
        return MAIN_MENU

    async with aiosqlite.connect("orders.db") as db:
        orders = await db.execute_fetchall("SELECT * FROM orders")
        if not orders:
            await update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return MAIN_MENU

        wb = xlsxwriter.Workbook("orders.xlsx")
        ws = wb.add_worksheet("–ó–∞–∫–∞–∑—ã")
        headers = ["ID", "UserID", "–î–∞—Ç–∞", "–ê–¥—Ä–µ—Å", "–ú–∞–≥–∞–∑–∏–Ω", "–ö–æ–ª-–≤–æ", "–°—É–º–º–∞", "–î–æ—Å—Ç–∞–≤–∫–∞"]
        for col, h in enumerate(headers):
            ws.write(0, col, h)

        for row, order in enumerate(orders, start=1):
            for col, cell in enumerate(order):
                ws.write(row, col, cell)

        wb.close()

    with open("orders.xlsx", "rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename="orders.xlsx"),
            caption="üìÑ –í—Å–µ –∑–∞–∫–∞–∑—ã (Excel)"
        )
    return MAIN_MENU

async def change_pass_login(update, context):
    context.user_data['change_login'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    return CHANGE_PASS_NEW

async def change_pass_set(update, context):
    new_pass = update.message.text.strip()
    login = context.user_data['change_login']
    async with aiosqlite.connect("orders.db") as db:
        await db.execute("UPDATE users SET password = ? WHERE username = ? AND role = 'manager'", (new_pass, login))
        await db.commit()
    await update.message.reply_text("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=main_menu("admin"))
    return MAIN_MENU

def init_db():
    import sqlite3
    conn = sqlite3.connect("orders.db")
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, role TEXT)")
    c.execute("""CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY, user_id INTEGER, date TEXT,
        address TEXT, shop TEXT, quantity TEXT, amount TEXT, delivery TEXT
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS order_items (
        id INTEGER PRIMARY KEY, order_id INTEGER,
        name TEXT, price INTEGER, quantity INTEGER
    )""")
    users = [("manager1", "1111", "manager"), ("manager2", "2222", "manager"), ("manager3", "3333", "manager"), ("admin", "0000", "admin")]
    for u in users:
        c.execute("INSERT OR IGNORE INTO users (username, password, role) VALUES (?, ?, ?)", u)
    conn.commit()
    conn.close()

def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ROLE: [MessageHandler(filters.TEXT, choose_role)],
            SELECT_USER: [MessageHandler(filters.TEXT, select_user)],
            PASSWORD: [MessageHandler(filters.TEXT, get_password)],
            MAIN_MENU: [MessageHandler(filters.TEXT, handle_main_menu)],
            ADDRESS: [MessageHandler(filters.TEXT, get_address)],
            SHOP: [MessageHandler(filters.TEXT, get_shop)],
            PRODUCT_QTY: [MessageHandler(filters.TEXT, get_product_qty)],
            DELIVERY_DATE: [MessageHandler(filters.TEXT, get_delivery)],
            CHANGE_PASS_LOGIN: [MessageHandler(filters.TEXT, change_pass_login)],
            CHANGE_PASS_NEW: [MessageHandler(filters.TEXT, change_pass_set)],
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    threading.Thread(target=run_keepalive).start()
    application.run_polling()

if __name__ == "__main__":
    main()
