import os
import threading
import aiosqlite
import xlsxwriter
from flask import Flask
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

BOT_TOKEN = "8042271583:AAHNBkjbd4BtbqS_djLsmywgqS5Y6sONnVU"  # üîÅ –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù

USERS = {
    "admin": {"password": "adminpass", "role": "admin"},
    "manager": {"password": "managerpass", "role": "manager"},
}

user_sessions = {}  # user_id: (username, role)
user_passwords = USERS.copy()

PRODUCTS = [
    ("–ì–µ–ª—å Sa 5–ª (Super)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (Bablegum)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–õ–∏–º–æ–Ω)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ë–µ–ª—ã–π)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ì–æ–ª—É–±–æ–π)", 1350),
    ("–ì–µ–ª—å Sa 3–ª (–ì–æ–ª—É–±–æ–π)", 1200),
    ("–ì–µ–ª—å Sa 3–ª (–ë–µ–ª—ã–π)", 1200),
    ("–°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã 1–ª (–õ–∏–º–æ–Ω)", 550),
]

LOGIN_USERNAME, LOGIN_PASSWORD, MAIN_MENU, SELECT_PRODUCT, SELECT_QUANTITY, SELECT_DATE, ENTER_PHONE, CHANGE_PASSWORD = range(8)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    return LOGIN_USERNAME

async def login_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = context.user_data["username"]
    password = update.message.text
    user = USERS.get(username)
    if user and user["password"] == password:
        user_sessions[update.effective_chat.id] = (username, user["role"])
        await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Sa Soap, {username}!")
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return ConversationHandler.END

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    _, role = user_sessions.get(update.effective_chat.id, (None, None))
    if role == "admin":
        keyboard = [
            ["üì¶ –ó–∞–∫–∞–∑", "üìÑ –í—ã–≥—Ä—É–∑–∫–∞ Excel"],
            ["üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã", "üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"],
            ["üö™ –í—ã–π—Ç–∏"]
        ]
    else:
        keyboard = [
            ["üì¶ –ó–∞–∫–∞–∑", "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"],
            ["üö™ –í—ã–π—Ç–∏"]
        ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    role = user_sessions.get(update.effective_chat.id, (None, None))[1]

    if text == "üì¶ –ó–∞–∫–∞–∑":
        context.user_data["cart"] = {}
        return await show_product_buttons(update)

    elif text == "üìÑ –í—ã–≥—Ä—É–∑–∫–∞ Excel" and role == "admin":
        return await export_orders(update)

    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã" and role == "admin":
        return await show_orders(update)

    elif text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã" and role == "manager":
        return await show_orders(update)

    elif text == "üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å" and role == "admin":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        return CHANGE_PASSWORD

    elif text == "üö™ –í—ã–π—Ç–∏":
        user_sessions.pop(update.effective_chat.id, None)
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: /start", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é.")
        return MAIN_MENU

# --- –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
async def change_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_pass = update.message.text.strip()
    USERS["admin"]["password"] = new_pass
    await update.message.reply_text("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    return await show_main_menu(update, context)

# --- –ó–∞–∫–∞–∑ ---
async def show_product_buttons(update: Update):
    keyboard = [[product[0]] for product in PRODUCTS]
    keyboard.append(["–ì–æ—Ç–æ–≤–æ"])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return SELECT_PRODUCT

async def handle_product_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–ì–æ—Ç–æ–≤–æ":
        if not context.user_data["cart"]:
            await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.")
            return SELECT_PRODUCT
        keyboard = [["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return SELECT_DATE

    product_names = [name for name, _ in PRODUCTS]
    if choice not in product_names:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_PRODUCT

    context.user_data["selected_product"] = choice
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ –±—É—Ç—ã–ª–∫–∞—Ö):")
    return SELECT_QUANTITY

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        qty = int(update.message.text)
        product = context.user_data["selected_product"]
        context.user_data["cart"][product] = context.user_data["cart"].get(product, 0) + qty
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {qty} —à—Ç. {product}")
        return await show_product_buttons(update)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return SELECT_QUANTITY

async def handle_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_map = {"–°–µ–≥–æ–¥–Ω—è": 0, "–ó–∞–≤—Ç—Ä–∞": 1, "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": 2}
    choice = update.message.text.strip()
    if choice not in date_map:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_DATE

    delivery_date = (datetime.now() + timedelta(days=date_map[choice])).strftime("%Y-%m-%d")
    context.user_data["delivery_date"] = delivery_date
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    return ENTER_PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    username, _ = user_sessions.get(update.effective_chat.id, (None, None))
    delivery_date = context.user_data["delivery_date"]
    cart = context.user_data["cart"]
    total = 0

    async with aiosqlite.connect("orders.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                item TEXT,
                quantity INTEGER,
                price INTEGER,
                delivery_date TEXT,
                phone TEXT
            )
        """)
        for item, qty in cart.items():
            price = dict(PRODUCTS)[item]
            total += qty * price
            await db.execute(
                "INSERT INTO orders (username, item, quantity, price, delivery_date, phone) VALUES (?, ?, ?, ?, ?, ?)",
                (username, item, qty, price, delivery_date, phone)
            )
        await db.commit()

    await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n–°—É–º–º–∞: {total} —Ç–≥\n–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}")
    return await show_main_menu(update, context)

# --- –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
async def export_orders(update: Update):
    file_path = "orders_export.xlsx"
    async with aiosqlite.connect("orders.db") as db:
        async with db.execute("SELECT username, item, quantity, price, delivery_date, phone FROM orders") as cursor:
            rows = await cursor.fetchall()

    workbook = xlsxwriter.Workbook(file_path)
    worksheet = workbook.add_worksheet()
    headers = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–î–∞—Ç–∞", "–¢–µ–ª–µ—Ñ–æ–Ω"]
    for col, header in enumerate(headers):
        worksheet.write(0, col, header)
    for row_idx, row in enumerate(rows, start=1):
        for col_idx, value in enumerate(row):
            worksheet.write(row_idx, col_idx, value)
    workbook.close()

    with open(file_path, "rb") as f:
        await update.message.reply_document(document=InputFile(f, file_path))
    os.remove(file_path)
    return MAIN_MENU

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---
async def show_orders(update: Update):
    username, role = user_sessions.get(update.effective_chat.id, (None, None))
    async with aiosqlite.connect("orders.db") as db:
        if role == "admin":
            query = "SELECT username, item, quantity, price, delivery_date, phone FROM orders ORDER BY id DESC LIMIT 10"
            args = ()
        else:
            query = "SELECT item, quantity, price, delivery_date, phone FROM orders WHERE username = ? ORDER BY id DESC LIMIT 10"
            args = (username,)
        async with db.execute(query, args) as cursor:
            rows = await cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return MAIN_MENU

    messages = []
    for row in rows:
        if role == "admin":
            u, item, qty, price, date, phone = row
            msg = f"üë§ {u}\nüì¶ {item} x {qty} —à—Ç\nüí∞ {qty * price} —Ç–≥\nüìÖ {date}\nüìû {phone}"
        else:
            item, qty, price, date, phone = row
            msg = f"üì¶ {item} x {qty} —à—Ç\nüí∞ {qty * price} —Ç–≥\nüìÖ {date}\nüìû {phone}"
        messages.append(msg)

    await update.message.reply_text("\n\n".join(messages))
    return MAIN_MENU

# --- Flask Keepalive ---
app = Flask(__name__)
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# --- Main ---
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    app_bot = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_username)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
            SELECT_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_choice)],
            SELECT_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity)],
            SELECT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_selection)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
            CHANGE_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_password)],
        },
        fallbacks=[CommandHandler("start", start)]
    )

    app_bot.add_handler(conv_handler)
    app_bot.run_polling()
