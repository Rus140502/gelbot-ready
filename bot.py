import os
import threading
import aiosqlite
import xlsxwriter
from flask import Flask
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

BOT_TOKEN = "8042271583:AAHNBkjbd4BtbqS_djLsmywgqS5Y6sONnVU"

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏ ---
USERS = {
    "admin": {"password": "adminpass", "role": "admin"},
    "manager": {"password": "managerpass", "role": "manager"},
}

user_sessions = {}  # user_id: (username, role)

PRODUCTS = [
    ("–ì–µ–ª—å Sa 5–ª (Super)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (Bablegum)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–õ–∏–º–æ–Ω)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ë–µ–ª—ã–π)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ì–æ–ª—É–±–æ–π)", 1350),
    ("–ì–µ–ª—å Sa 3–ª (–ì–æ–ª—É–±–æ–π)", 1200),
    ("–ì–µ–ª—å Sa 3–ª (–ë–µ–ª—ã–π)", 1200),
    ("–°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã 1–ª (–õ–∏–º–æ–Ω)", 550),
]

LOGIN_USERNAME, LOGIN_PASSWORD, MAIN_MENU, SELECT_PRODUCTS, SELECT_DATE, ENTER_PHONE = range(6)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    return LOGIN_USERNAME

async def login_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = context.user_data["username"]
    password = update.message.text
    user = USERS.get(username)
    if user and user["password"] == password:
        user_sessions[update.effective_chat.id] = (username, user["role"])
        await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    _, role = user_sessions.get(update.effective_chat.id, (None, None))
    if role == "admin":
        keyboard = [["üì¶ –ó–∞–∫–∞–∑", "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã (Excel)"]]
    else:
        keyboard = [["üì¶ –ó–∞–∫–∞–∑"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return MAIN_MENU

# --- –ó–∞–∫–∞–∑ ---
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –ó–∞–∫–∞–∑":
        context.user_data["cart"] = {}
        return await show_products(update, context)
    elif text == "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã (Excel)":
        username, role = user_sessions.get(update.effective_chat.id, (None, None))
        if role != "admin":
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return MAIN_MENU
        return await export_orders(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é.")
        return MAIN_MENU

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_lines = [f"{i+1}. {name} - {price} —Ç–≥" for i, (name, price) in enumerate(PRODUCTS)]
    message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3).\n–ù–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞.\n\n" + "\n".join(product_lines)
    await update.message.reply_text(message)
    return SELECT_PRODUCTS

async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "–≥–æ—Ç–æ–≤–æ":
        if not context.user_data["cart"]:
            await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.")
            return SELECT_PRODUCTS
        keyboard = [["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return SELECT_DATE
    try:
        index, qty = map(int, text.split())
        name, price = PRODUCTS[index - 1]
        context.user_data["cart"][name] = qty
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {qty} –±—É—Ç—ã–ª–∫–∏ {name}")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    return SELECT_PRODUCTS

async def handle_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_map = {"–°–µ–≥–æ–¥–Ω—è": 0, "–ó–∞–≤—Ç—Ä–∞": 1, "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": 2}
    choice = update.message.text.strip()
    if choice not in date_map:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return SELECT_DATE
    delivery_date = (datetime.now() + timedelta(days=date_map[choice])).strftime("%Y-%m-%d")
    context.user_data["delivery_date"] = delivery_date
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    return ENTER_PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    username, _ = user_sessions.get(update.effective_chat.id, (None, None))
    delivery_date = context.user_data["delivery_date"]
    cart = context.user_data["cart"]
    total = 0

    async with aiosqlite.connect("orders.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                item TEXT,
                quantity INTEGER,
                price INTEGER,
                delivery_date TEXT,
                phone TEXT
            )
        """)
        for item, qty in cart.items():
            price = dict(PRODUCTS)[item]
            total += qty * price
            await db.execute(
                "INSERT INTO orders (username, item, quantity, price, delivery_date, phone) VALUES (?, ?, ?, ?, ?, ?)",
                (username, item, qty, price, delivery_date, phone)
            )
        await db.commit()

    await update.message.reply_text(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°—É–º–º–∞: {total} —Ç–≥\n–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}")
    return await show_main_menu(update, context)

# --- –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ Excel (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
async def export_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_path = "orders_export.xlsx"
    async with aiosqlite.connect("orders.db") as db:
        async with db.execute("SELECT username, item, quantity, price, delivery_date, phone FROM orders") as cursor:
            rows = await cursor.fetchall()

    workbook = xlsxwriter.Workbook(file_path)
    worksheet = workbook.add_worksheet()
    headers = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ –±—É—Ç—ã–ª–æ–∫", "–¶–µ–Ω–∞ –∑–∞ —à—Ç.", "–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–¢–µ–ª–µ—Ñ–æ–Ω"]
    for col, header in enumerate(headers):
        worksheet.write(0, col, header)
    for row_idx, row in enumerate(rows, start=1):
        for col_idx, value in enumerate(row):
            worksheet.write(row_idx, col_idx, value)
    workbook.close()

    with open(file_path, "rb") as f:
        await update.message.reply_document(document=InputFile(f, file_path))
    os.remove(file_path)
    return MAIN_MENU

# --- Flask Keepalive ---
app = Flask(__name__)
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# --- Main ---
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    app_bot = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_username)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
            SELECT_PRODUCTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_selection)],
            SELECT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_selection)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
        },
        fallbacks=[CommandHandler("start", start)]
    )

    app_bot.add_handler(conv_handler)
    app_bot.run_polling()
