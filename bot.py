import logging
import os
import aiosqlite
from telegram import (Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile)
from telegram.ext import (Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler)
from datetime import datetime, timedelta
import xlsxwriter
import asyncio

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
BOT_TOKEN = "8042271583:AAHNBkjbd4BtbqS_djLsmywgqS5Y6sONnVU"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
LOGIN, PASSWORD, MENU, ORDER, QUANTITY, DELIVERY_DATE, PHONE, SHOP_NAME, CONFIRM = range(9)

# --- –ü—Ä–æ–¥—É–∫—Ç—ã ---
PRODUCTS = [
    ("–ì–µ–ª—å Sa 5–ª (Super)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (Bablegum)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–õ–∏–º–æ–Ω)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ë–µ–ª—ã–π)", 1350),
    ("–ì–µ–ª—å Sa 5–ª (–ì–æ–ª—É–±–æ–π)", 1350),
    ("–ì–µ–ª—å Sa 3–ª (–ì–æ–ª—É–±–æ–π)", 1200),
    ("–ì–µ–ª—å Sa 3–ª (–ë–µ–ª—ã–π)", 1200),
    ("–°—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã 1–ª (–õ–∏–º–æ–Ω)", 550),
]

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
USERS = {
    "admin": {"password": "adminpass", "role": "admin"},
    "manager": {"password": "managerpass", "role": "manager"},
}

# --- –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_sessions = {}

# --- –•–µ–Ω–¥–ª–µ—Ä /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    return LOGIN

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['login'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    login = context.user_data['login']
    password = update.message.text

    if login in USERS and USERS[login]['password'] == password:
        context.user_data['role'] = USERS[login]['role']
        user_sessions[update.effective_user.id] = {
            "login": login,
            "role": USERS[login]['role']
        }
        await show_menu(update, context)
        return MENU
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
        return ConversationHandler.END

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = context.user_data['role']
    if role == "admin":
        keyboard = [["üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel"], ["üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã"], ["üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"]]
    else:
        keyboard = [["üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"], ["üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    role = context.user_data.get('role')

    if role == 'admin':
        if text == "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel":
            await export_excel(update)
        elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã":
            await show_orders(update)
        elif text == "üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å":
            await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    else:
        if text == "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑":
            context.user_data['order'] = {}
            return await show_products(update, context)
        elif text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            await show_orders(update)
    return MENU

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[product[0]] for product in PRODUCTS] + [["–ì–æ—Ç–æ–≤–æ"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ORDER

async def order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_name = update.message.text
    if product_name == "–ì–æ—Ç–æ–≤–æ":
        return await ask_delivery_date(update, context)

    context.user_data['current_product'] = product_name
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")
    return QUANTITY

async def quantity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quantity = int(update.message.text)
    product_name = context.user_data['current_product']

    if 'order' not in context.user_data:
        context.user_data['order'] = {}
    context.user_data['order'][product_name] = context.user_data['order'].get(product_name, 0) + quantity

    return await show_products(update, context)

async def ask_delivery_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–°–µ–≥–æ–¥–Ω—è"], ["–ó–∞–≤—Ç—Ä–∞"], ["–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DELIVERY_DATE

async def delivery_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text
    today = datetime.today()
    if date_str == "–°–µ–≥–æ–¥–Ω—è":
        delivery_date = today
    elif date_str == "–ó–∞–≤—Ç—Ä–∞":
        delivery_date = today + timedelta(days=1)
    else:
        delivery_date = today + timedelta(days=2)

    context.user_data['delivery_date'] = delivery_date.strftime("%Y-%m-%d")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")
    return SHOP_NAME

async def shop_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['shop'] = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    await save_order(update, context)

    await update.message.reply_text("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=ReplyKeyboardMarkup([["üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"], ["üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"]], resize_keyboard=True))
    return MENU

async def save_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    items = context.user_data['order']
    phone = context.user_data['phone']
    shop = context.user_data['shop']
    delivery_date = context.user_data['delivery_date']
    total = 0
    for name, qty in items.items():
        price = dict(PRODUCTS).get(name, 0)
        total += price * qty

    async with aiosqlite.connect("orders.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                product TEXT,
                quantity INTEGER,
                price INTEGER,
                phone TEXT,
                shop TEXT,
                delivery_date TEXT,
                timestamp TEXT
            )
        """)
        for name, qty in items.items():
            price = dict(PRODUCTS).get(name, 0)
            await db.execute("""
                INSERT INTO orders (user_id, product, quantity, price, phone, shop, delivery_date, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (user_id, name, qty, price, phone, shop, delivery_date, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        await db.commit()

async def show_orders(update: Update):
    user_id = update.effective_user.id
    is_admin = user_sessions.get(user_id, {}).get("role") == "admin"

    async with aiosqlite.connect("orders.db") as db:
        if is_admin:
            cursor = await db.execute("SELECT * FROM orders ORDER BY timestamp DESC LIMIT 10")
        else:
            cursor = await db.execute("SELECT * FROM orders WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10", (user_id,))
        rows = await cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    messages = []
    for row in rows:
        _, _, product, quantity, price, phone, shop, delivery, ts = row
        msg = f"üõçÔ∏è {product}\n–ö–æ–ª-–≤–æ: {quantity} –±—É—Ç—ã–ª–æ–∫\n–¶–µ–Ω–∞: {price} —Ç–≥\n–ú–∞–≥–∞–∑–∏–Ω: {shop}\n–¢–µ–ª: {phone}\n–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery}\n–°–æ–∑–¥–∞–Ω: {ts}"
        messages.append(msg)

    for msg in messages:
        await update.message.reply_text(msg)

async def export_excel(update: Update):
    async with aiosqlite.connect("orders.db") as db:
        cursor = await db.execute("SELECT * FROM orders")
        rows = await cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    file_path = "orders.xlsx"
    workbook = xlsxwriter.Workbook(file_path)
    sheet = workbook.add_worksheet()
    headers = ["ID", "User ID", "–¢–æ–≤–∞—Ä", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ú–∞–≥–∞–∑–∏–Ω", "–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–°–æ–∑–¥–∞–Ω"]
    for col, header in enumerate(headers):
        sheet.write(0, col, header)
    for row_num, row in enumerate(rows, start=1):
        for col, value in enumerate(row):
            sheet.write(row_num, col, value)
    workbook.close()

    with open(file_path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename=file_path))

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
            ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_handler)],
            QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_handler)],
            DELIVERY_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_date_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            SHOP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, shop_name_handler)],
        },
        fallbacks=[]
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == '__main__':
    main()
